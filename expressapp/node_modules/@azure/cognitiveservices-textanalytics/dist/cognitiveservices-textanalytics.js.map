{"version":3,"file":"cognitiveservices-textanalytics.js","sources":["../node_modules/tslib/tslib.es6.js","../src/models/index.ts","../src/models/mappers.ts","../src/models/parameters.ts","../src/textAnalyticsClientContext.ts","../src/textAnalyticsClient.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\n\nimport * as msRest from \"@azure/ms-rest-js\";\n\n/**\n * An interface representing MultiLanguageInput.\n */\nexport interface MultiLanguageInput {\n  /**\n   * This is the 2 letter ISO 639-1 representation of a language. For example, use \"en\" for\n   * English; \"es\" for Spanish etc.,\n   */\n  language?: string;\n  /**\n   * Unique, non-empty document identifier.\n   */\n  id?: string;\n  text?: string;\n}\n\n/**\n * An interface representing MultiLanguageBatchInput.\n */\nexport interface MultiLanguageBatchInput {\n  documents?: MultiLanguageInput[];\n}\n\n/**\n * An interface representing MatchRecord.\n */\nexport interface MatchRecord {\n  /**\n   * (optional) If a well-known item with Wikipedia link is recognized, a decimal number denoting\n   * the confidence level of the Wikipedia info will be returned.\n   */\n  wikipediaScore?: number;\n  /**\n   * (optional) If an entity type is recognized, a decimal number denoting the confidence level of\n   * the entity type will be returned.\n   */\n  entityTypeScore?: number;\n  /**\n   * Entity text as appears in the request.\n   */\n  text?: string;\n  /**\n   * Start position (in Unicode characters) for the entity match text.\n   */\n  offset?: number;\n  /**\n   * Length (in Unicode characters) for the entity match text.\n   */\n  length?: number;\n}\n\n/**\n * An interface representing EntityRecord.\n */\nexport interface EntityRecord {\n  /**\n   * Entity formal name.\n   */\n  name?: string;\n  /**\n   * List of instances this entity appears in the text.\n   */\n  matches?: MatchRecord[];\n  /**\n   * Wikipedia language for which the WikipediaId and WikipediaUrl refers to.\n   */\n  wikipediaLanguage?: string;\n  /**\n   * Wikipedia unique identifier of the recognized entity.\n   */\n  wikipediaId?: string;\n  /**\n   * URL for the entity's Wikipedia page.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly wikipediaUrl?: string;\n  /**\n   * Bing unique identifier of the recognized entity. Use in conjunction with the Bing Entity\n   * Search API to fetch additional relevant information.\n   */\n  bingId?: string;\n  /**\n   * Entity type from Named Entity Recognition model\n   */\n  type?: string;\n  /**\n   * Entity sub type from Named Entity Recognition model\n   */\n  subType?: string;\n}\n\n/**\n * An interface representing DocumentStatistics.\n */\nexport interface DocumentStatistics {\n  /**\n   * Number of text elements recognized in the document.\n   */\n  charactersCount?: number;\n  /**\n   * Number of transactions for the document.\n   */\n  transactionsCount?: number;\n}\n\n/**\n * An interface representing EntitiesBatchResultItem.\n */\nexport interface EntitiesBatchResultItem {\n  /**\n   * Unique, non-empty document identifier.\n   */\n  id?: string;\n  /**\n   * Recognized entities in the document.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly entities?: EntityRecord[];\n  /**\n   * (Optional) if showStats=true was specified in the request this field will contain information\n   * about the document payload.\n   */\n  statistics?: DocumentStatistics;\n}\n\n/**\n * An interface representing ErrorRecord.\n */\nexport interface ErrorRecord {\n  /**\n   * Input document unique identifier the error refers to.\n   */\n  id?: string;\n  /**\n   * Error message.\n   */\n  message?: string;\n}\n\n/**\n * An interface representing RequestStatistics.\n */\nexport interface RequestStatistics {\n  /**\n   * Number of documents submitted in the request.\n   */\n  documentsCount?: number;\n  /**\n   * Number of valid documents. This excludes empty, over-size limit or non-supported languages\n   * documents.\n   */\n  validDocumentsCount?: number;\n  /**\n   * Number of invalid documents. This includes empty, over-size limit or non-supported languages\n   * documents.\n   */\n  erroneousDocumentsCount?: number;\n  /**\n   * Number of transactions for the request.\n   */\n  transactionsCount?: number;\n}\n\n/**\n * An interface representing EntitiesBatchResult.\n */\nexport interface EntitiesBatchResult {\n  /**\n   * Response by document\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly documents?: EntitiesBatchResultItem[];\n  /**\n   * Errors and Warnings by document\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly errors?: ErrorRecord[];\n  /**\n   * (Optional) if showStats=true was specified in the request this field will contain information\n   * about the request payload.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly statistics?: RequestStatistics;\n}\n\n/**\n * An interface representing InternalError.\n */\nexport interface InternalError {\n  code?: string;\n  message?: string;\n  innerError?: InternalError;\n}\n\n/**\n * An interface representing ErrorResponse.\n */\nexport interface ErrorResponse {\n  code?: string;\n  message?: string;\n  target?: string;\n  innerError?: InternalError;\n}\n\n/**\n * An interface representing KeyPhraseBatchResultItem.\n */\nexport interface KeyPhraseBatchResultItem {\n  /**\n   * Unique, non-empty document identifier.\n   */\n  id?: string;\n  /**\n   * A list of representative words or phrases. The number of key phrases returned is proportional\n   * to the number of words in the input document.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly keyPhrases?: string[];\n  /**\n   * (Optional) if showStats=true was specified in the request this field will contain information\n   * about the document payload.\n   */\n  statistics?: DocumentStatistics;\n}\n\n/**\n * An interface representing KeyPhraseBatchResult.\n */\nexport interface KeyPhraseBatchResult {\n  /**\n   * Response by document\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly documents?: KeyPhraseBatchResultItem[];\n  /**\n   * Errors and Warnings by document\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly errors?: ErrorRecord[];\n  /**\n   * =(Optional) if showStats=true was specified in the request this field will contain information\n   * about the request payload.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly statistics?: RequestStatistics;\n}\n\n/**\n * An interface representing LanguageInput.\n */\nexport interface LanguageInput {\n  countryHint?: string;\n  /**\n   * Unique, non-empty document identifier.\n   */\n  id?: string;\n  text?: string;\n}\n\n/**\n * An interface representing LanguageBatchInput.\n */\nexport interface LanguageBatchInput {\n  documents?: LanguageInput[];\n}\n\n/**\n * An interface representing DetectedLanguage.\n */\nexport interface DetectedLanguage {\n  /**\n   * Long name of a detected language (e.g. English, French).\n   */\n  name?: string;\n  /**\n   * A two letter representation of the detected language according to the ISO 639-1 standard (e.g.\n   * en, fr).\n   */\n  iso6391Name?: string;\n  /**\n   * A confidence score between 0 and 1. Scores close to 1 indicate 100% certainty that the\n   * identified language is true.\n   */\n  score?: number;\n}\n\n/**\n * An interface representing LanguageBatchResultItem.\n */\nexport interface LanguageBatchResultItem {\n  /**\n   * Unique, non-empty document identifier.\n   */\n  id?: string;\n  /**\n   * A list of extracted languages.\n   */\n  detectedLanguages?: DetectedLanguage[];\n  /**\n   * (Optional) if showStats=true was specified in the request this field will contain information\n   * about the document payload.\n   */\n  statistics?: DocumentStatistics;\n}\n\n/**\n * An interface representing LanguageBatchResult.\n */\nexport interface LanguageBatchResult {\n  /**\n   * Response by document\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly documents?: LanguageBatchResultItem[];\n  /**\n   * Errors and Warnings by document\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly errors?: ErrorRecord[];\n  /**\n   * (Optional) if showStats=true was specified in the request this field will contain information\n   * about the request payload.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly statistics?: RequestStatistics;\n}\n\n/**\n * An interface representing SentimentBatchResultItem.\n */\nexport interface SentimentBatchResultItem {\n  /**\n   * Unique, non-empty document identifier.\n   */\n  id?: string;\n  /**\n   * A decimal number between 0 and 1 denoting the sentiment of the document. A score above 0.7\n   * usually refers to a positive document while a score below 0.3 normally has a negative\n   * connotation. Mid values refer to neutral text.\n   */\n  score?: number;\n  /**\n   * (Optional) if showStats=true was specified in the request this field will contain information\n   * about the document payload.\n   */\n  statistics?: DocumentStatistics;\n}\n\n/**\n * An interface representing SentimentBatchResult.\n */\nexport interface SentimentBatchResult {\n  /**\n   * Response by document\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly documents?: SentimentBatchResultItem[];\n  /**\n   * Errors and Warnings by document\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly errors?: ErrorRecord[];\n  /**\n   * (Optional) if showStats=true was specified in the request this field will contain information\n   * about the request payload.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly statistics?: RequestStatistics;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface TextAnalyticsClientDetectLanguageOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * (optional) if set to true, response will contain input and document level statistics.\n   */\n  showStats?: boolean;\n  /**\n   * Collection of documents to analyze.\n   */\n  languageBatchInput?: LanguageBatchInput;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface TextAnalyticsClientEntitiesOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * (optional) if set to true, response will contain input and document level statistics.\n   */\n  showStats?: boolean;\n  /**\n   * Collection of documents to analyze.\n   */\n  multiLanguageBatchInput?: MultiLanguageBatchInput;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface TextAnalyticsClientKeyPhrasesOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * (optional) if set to true, response will contain input and document level statistics.\n   */\n  showStats?: boolean;\n  /**\n   * Collection of documents to analyze. Documents can now contain a language field to indicate the\n   * text language\n   */\n  multiLanguageBatchInput?: MultiLanguageBatchInput;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface TextAnalyticsClientSentimentOptionalParams extends msRest.RequestOptionsBase {\n  /**\n   * (optional) if set to true, response will contain input and document level statistics.\n   */\n  showStats?: boolean;\n  /**\n   * Collection of documents to analyze.\n   */\n  multiLanguageBatchInput?: MultiLanguageBatchInput;\n}\n\n/**\n * Contains response data for the detectLanguage operation.\n */\nexport type DetectLanguageResponse = LanguageBatchResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: LanguageBatchResult;\n    };\n};\n\n/**\n * Contains response data for the entities operation.\n */\nexport type EntitiesResponse = EntitiesBatchResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: EntitiesBatchResult;\n    };\n};\n\n/**\n * Contains response data for the keyPhrases operation.\n */\nexport type KeyPhrasesResponse = KeyPhraseBatchResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: KeyPhraseBatchResult;\n    };\n};\n\n/**\n * Contains response data for the sentiment operation.\n */\nexport type SentimentResponse = {\n  /**\n   * The parsed response body.\n   */\n  body: any;\n\n  /**\n   * The underlying HTTP response.\n   */\n  _response: msRest.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: any;\n    };\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\n\n\nexport const MultiLanguageInput: msRest.CompositeMapper = {\n  serializedName: \"MultiLanguageInput\",\n  type: {\n    name: \"Composite\",\n    className: \"MultiLanguageInput\",\n    modelProperties: {\n      language: {\n        serializedName: \"language\",\n        type: {\n          name: \"String\"\n        }\n      },\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      text: {\n        serializedName: \"text\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const MultiLanguageBatchInput: msRest.CompositeMapper = {\n  serializedName: \"MultiLanguageBatchInput\",\n  type: {\n    name: \"Composite\",\n    className: \"MultiLanguageBatchInput\",\n    modelProperties: {\n      documents: {\n        serializedName: \"documents\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"MultiLanguageInput\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const MatchRecord: msRest.CompositeMapper = {\n  serializedName: \"MatchRecord\",\n  type: {\n    name: \"Composite\",\n    className: \"MatchRecord\",\n    modelProperties: {\n      wikipediaScore: {\n        serializedName: \"wikipediaScore\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      entityTypeScore: {\n        serializedName: \"entityTypeScore\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      text: {\n        serializedName: \"text\",\n        type: {\n          name: \"String\"\n        }\n      },\n      offset: {\n        serializedName: \"offset\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      length: {\n        serializedName: \"length\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const EntityRecord: msRest.CompositeMapper = {\n  serializedName: \"EntityRecord\",\n  type: {\n    name: \"Composite\",\n    className: \"EntityRecord\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      matches: {\n        serializedName: \"matches\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"MatchRecord\"\n            }\n          }\n        }\n      },\n      wikipediaLanguage: {\n        serializedName: \"wikipediaLanguage\",\n        type: {\n          name: \"String\"\n        }\n      },\n      wikipediaId: {\n        serializedName: \"wikipediaId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      wikipediaUrl: {\n        readOnly: true,\n        serializedName: \"wikipediaUrl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      bingId: {\n        serializedName: \"bingId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      subType: {\n        serializedName: \"subType\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentStatistics: msRest.CompositeMapper = {\n  serializedName: \"DocumentStatistics\",\n  type: {\n    name: \"Composite\",\n    className: \"DocumentStatistics\",\n    modelProperties: {\n      charactersCount: {\n        serializedName: \"charactersCount\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      transactionsCount: {\n        serializedName: \"transactionsCount\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const EntitiesBatchResultItem: msRest.CompositeMapper = {\n  serializedName: \"EntitiesBatchResultItem\",\n  type: {\n    name: \"Composite\",\n    className: \"EntitiesBatchResultItem\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      entities: {\n        readOnly: true,\n        serializedName: \"entities\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"EntityRecord\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"DocumentStatistics\"\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorRecord: msRest.CompositeMapper = {\n  serializedName: \"ErrorRecord\",\n  type: {\n    name: \"Composite\",\n    className: \"ErrorRecord\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RequestStatistics: msRest.CompositeMapper = {\n  serializedName: \"RequestStatistics\",\n  type: {\n    name: \"Composite\",\n    className: \"RequestStatistics\",\n    modelProperties: {\n      documentsCount: {\n        serializedName: \"documentsCount\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      validDocumentsCount: {\n        serializedName: \"validDocumentsCount\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      erroneousDocumentsCount: {\n        serializedName: \"erroneousDocumentsCount\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      transactionsCount: {\n        serializedName: \"transactionsCount\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const EntitiesBatchResult: msRest.CompositeMapper = {\n  serializedName: \"EntitiesBatchResult\",\n  type: {\n    name: \"Composite\",\n    className: \"EntitiesBatchResult\",\n    modelProperties: {\n      documents: {\n        readOnly: true,\n        serializedName: \"documents\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"EntitiesBatchResultItem\"\n            }\n          }\n        }\n      },\n      errors: {\n        readOnly: true,\n        serializedName: \"errors\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ErrorRecord\"\n            }\n          }\n        }\n      },\n      statistics: {\n        readOnly: true,\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"RequestStatistics\"\n        }\n      }\n    }\n  }\n};\n\nexport const InternalError: msRest.CompositeMapper = {\n  serializedName: \"InternalError\",\n  type: {\n    name: \"Composite\",\n    className: \"InternalError\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        type: {\n          name: \"String\"\n        }\n      },\n      innerError: {\n        serializedName: \"innerError\",\n        type: {\n          name: \"Composite\",\n          className: \"InternalError\"\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorResponse: msRest.CompositeMapper = {\n  serializedName: \"ErrorResponse\",\n  type: {\n    name: \"Composite\",\n    className: \"ErrorResponse\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        type: {\n          name: \"String\"\n        }\n      },\n      target: {\n        serializedName: \"target\",\n        type: {\n          name: \"String\"\n        }\n      },\n      innerError: {\n        serializedName: \"innerError\",\n        type: {\n          name: \"Composite\",\n          className: \"InternalError\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyPhraseBatchResultItem: msRest.CompositeMapper = {\n  serializedName: \"KeyPhraseBatchResultItem\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyPhraseBatchResultItem\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      keyPhrases: {\n        readOnly: true,\n        serializedName: \"keyPhrases\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"DocumentStatistics\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyPhraseBatchResult: msRest.CompositeMapper = {\n  serializedName: \"KeyPhraseBatchResult\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyPhraseBatchResult\",\n    modelProperties: {\n      documents: {\n        readOnly: true,\n        serializedName: \"documents\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"KeyPhraseBatchResultItem\"\n            }\n          }\n        }\n      },\n      errors: {\n        readOnly: true,\n        serializedName: \"errors\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ErrorRecord\"\n            }\n          }\n        }\n      },\n      statistics: {\n        readOnly: true,\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"RequestStatistics\"\n        }\n      }\n    }\n  }\n};\n\nexport const LanguageInput: msRest.CompositeMapper = {\n  serializedName: \"LanguageInput\",\n  type: {\n    name: \"Composite\",\n    className: \"LanguageInput\",\n    modelProperties: {\n      countryHint: {\n        serializedName: \"countryHint\",\n        type: {\n          name: \"String\"\n        }\n      },\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      text: {\n        serializedName: \"text\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const LanguageBatchInput: msRest.CompositeMapper = {\n  serializedName: \"LanguageBatchInput\",\n  type: {\n    name: \"Composite\",\n    className: \"LanguageBatchInput\",\n    modelProperties: {\n      documents: {\n        serializedName: \"documents\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"LanguageInput\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DetectedLanguage: msRest.CompositeMapper = {\n  serializedName: \"DetectedLanguage\",\n  type: {\n    name: \"Composite\",\n    className: \"DetectedLanguage\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      iso6391Name: {\n        serializedName: \"iso6391Name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      score: {\n        serializedName: \"score\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const LanguageBatchResultItem: msRest.CompositeMapper = {\n  serializedName: \"LanguageBatchResultItem\",\n  type: {\n    name: \"Composite\",\n    className: \"LanguageBatchResultItem\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      detectedLanguages: {\n        serializedName: \"detectedLanguages\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DetectedLanguage\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"DocumentStatistics\"\n        }\n      }\n    }\n  }\n};\n\nexport const LanguageBatchResult: msRest.CompositeMapper = {\n  serializedName: \"LanguageBatchResult\",\n  type: {\n    name: \"Composite\",\n    className: \"LanguageBatchResult\",\n    modelProperties: {\n      documents: {\n        readOnly: true,\n        serializedName: \"documents\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"LanguageBatchResultItem\"\n            }\n          }\n        }\n      },\n      errors: {\n        readOnly: true,\n        serializedName: \"errors\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ErrorRecord\"\n            }\n          }\n        }\n      },\n      statistics: {\n        readOnly: true,\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"RequestStatistics\"\n        }\n      }\n    }\n  }\n};\n\nexport const SentimentBatchResultItem: msRest.CompositeMapper = {\n  serializedName: \"SentimentBatchResultItem\",\n  type: {\n    name: \"Composite\",\n    className: \"SentimentBatchResultItem\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      score: {\n        serializedName: \"score\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"DocumentStatistics\"\n        }\n      }\n    }\n  }\n};\n\nexport const SentimentBatchResult: msRest.CompositeMapper = {\n  serializedName: \"SentimentBatchResult\",\n  type: {\n    name: \"Composite\",\n    className: \"SentimentBatchResult\",\n    modelProperties: {\n      documents: {\n        readOnly: true,\n        serializedName: \"documents\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SentimentBatchResultItem\"\n            }\n          }\n        }\n      },\n      errors: {\n        readOnly: true,\n        serializedName: \"errors\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ErrorRecord\"\n            }\n          }\n        }\n      },\n      statistics: {\n        readOnly: true,\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"RequestStatistics\"\n        }\n      }\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\n\nexport const endpoint: msRest.OperationURLParameter = {\n  parameterPath: \"endpoint\",\n  mapper: {\n    required: true,\n    serializedName: \"Endpoint\",\n    defaultValue: '',\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\nexport const showStats: msRest.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"showStats\"\n  ],\n  mapper: {\n    serializedName: \"showStats\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\n\nconst packageName = \"@azure/cognitiveservices-textanalytics\";\nconst packageVersion = \"4.0.0\";\n\nexport class TextAnalyticsClientContext extends msRest.ServiceClient {\n  endpoint: string;\n  credentials: msRest.ServiceClientCredentials;\n\n  /**\n   * Initializes a new instance of the TextAnalyticsClientContext class.\n   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:\n   * https://westus.api.cognitive.microsoft.com).\n   * @param credentials Subscription credentials which uniquely identify client subscription.\n   * @param [options] The parameter options\n   */\n  constructor(credentials: msRest.ServiceClientCredentials, endpoint: string, options?: msRest.ServiceClientOptions) {\n    if (endpoint == undefined) {\n      throw new Error(\"'endpoint' cannot be null.\");\n    }\n    if (credentials == undefined) {\n      throw new Error(\"'credentials' cannot be null.\");\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    if (!options.userAgent) {\n      const defaultUserAgent = msRest.getDefaultUserAgentValue();\n      options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;\n    }\n\n    super(credentials, options);\n\n    this.baseUri = \"{Endpoint}/text/analytics/v2.1\";\n    this.requestContentType = \"application/json; charset=utf-8\";\n    this.endpoint = endpoint;\n    this.credentials = credentials;\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as msRest from \"@azure/ms-rest-js\";\nimport * as Models from \"./models\";\nimport * as Mappers from \"./models/mappers\";\nimport * as Parameters from \"./models/parameters\";\nimport { TextAnalyticsClientContext } from \"./textAnalyticsClientContext\";\n\nclass TextAnalyticsClient extends TextAnalyticsClientContext {\n  /**\n   * Initializes a new instance of the TextAnalyticsClient class.\n   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:\n   * https://westus.api.cognitive.microsoft.com).\n   * @param credentials Subscription credentials which uniquely identify client subscription.\n   * @param [options] The parameter options\n   */\n  constructor(credentials: msRest.ServiceClientCredentials, endpoint: string, options?: msRest.ServiceClientOptions) {\n    super(credentials, endpoint, options);\n  }\n\n  /**\n   * Scores close to 1 indicate 100% certainty that the identified language is true. A total of 120\n   * languages are supported.\n   * @summary The API returns the detected language and a numeric score between 0 and 1.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DetectLanguageResponse>\n   */\n  detectLanguage(options?: Models.TextAnalyticsClientDetectLanguageOptionalParams): Promise<Models.DetectLanguageResponse>;\n  /**\n   * @param callback The callback\n   */\n  detectLanguage(callback: msRest.ServiceCallback<Models.LanguageBatchResult>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  detectLanguage(options: Models.TextAnalyticsClientDetectLanguageOptionalParams, callback: msRest.ServiceCallback<Models.LanguageBatchResult>): void;\n  detectLanguage(options?: Models.TextAnalyticsClientDetectLanguageOptionalParams | msRest.ServiceCallback<Models.LanguageBatchResult>, callback?: msRest.ServiceCallback<Models.LanguageBatchResult>): Promise<Models.DetectLanguageResponse> {\n    return this.sendOperationRequest(\n      {\n        options\n      },\n      detectLanguageOperationSpec,\n      callback) as Promise<Models.DetectLanguageResponse>;\n  }\n\n  /**\n   * To get even more information on each recognized entity we recommend using the Bing Entity Search\n   * API by querying for the recognized entities names. See the <a\n   * href=\"https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/text-analytics-supported-languages\">Supported\n   * languages in Text Analytics API</a> for the list of enabled languages.\n   * @summary The API returns a list of recognized entities in a given document.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.EntitiesResponse>\n   */\n  entities(options?: Models.TextAnalyticsClientEntitiesOptionalParams): Promise<Models.EntitiesResponse>;\n  /**\n   * @param callback The callback\n   */\n  entities(callback: msRest.ServiceCallback<Models.EntitiesBatchResult>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  entities(options: Models.TextAnalyticsClientEntitiesOptionalParams, callback: msRest.ServiceCallback<Models.EntitiesBatchResult>): void;\n  entities(options?: Models.TextAnalyticsClientEntitiesOptionalParams | msRest.ServiceCallback<Models.EntitiesBatchResult>, callback?: msRest.ServiceCallback<Models.EntitiesBatchResult>): Promise<Models.EntitiesResponse> {\n    return this.sendOperationRequest(\n      {\n        options\n      },\n      entitiesOperationSpec,\n      callback) as Promise<Models.EntitiesResponse>;\n  }\n\n  /**\n   * See the <a\n   * href=\"https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview#supported-languages\">Text\n   * Analytics Documentation</a> for details about the languages that are supported by key phrase\n   * extraction.\n   * @summary The API returns a list of strings denoting the key talking points in the input text.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.KeyPhrasesResponse>\n   */\n  keyPhrases(options?: Models.TextAnalyticsClientKeyPhrasesOptionalParams): Promise<Models.KeyPhrasesResponse>;\n  /**\n   * @param callback The callback\n   */\n  keyPhrases(callback: msRest.ServiceCallback<Models.KeyPhraseBatchResult>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  keyPhrases(options: Models.TextAnalyticsClientKeyPhrasesOptionalParams, callback: msRest.ServiceCallback<Models.KeyPhraseBatchResult>): void;\n  keyPhrases(options?: Models.TextAnalyticsClientKeyPhrasesOptionalParams | msRest.ServiceCallback<Models.KeyPhraseBatchResult>, callback?: msRest.ServiceCallback<Models.KeyPhraseBatchResult>): Promise<Models.KeyPhrasesResponse> {\n    return this.sendOperationRequest(\n      {\n        options\n      },\n      keyPhrasesOperationSpec,\n      callback) as Promise<Models.KeyPhrasesResponse>;\n  }\n\n  /**\n   * Scores close to 1 indicate positive sentiment, while scores close to 0 indicate negative\n   * sentiment. A score of 0.5 indicates the lack of sentiment (e.g. a factoid statement). See the <a\n   * href=\"https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview#supported-languages\">Text\n   * Analytics Documentation</a> for details about the languages that are supported by sentiment\n   * analysis.\n   * @summary The API returns a numeric score between 0 and 1.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.SentimentResponse>\n   */\n  sentiment(options?: Models.TextAnalyticsClientSentimentOptionalParams): Promise<Models.SentimentResponse>;\n  /**\n   * @param callback The callback\n   */\n  sentiment(callback: msRest.ServiceCallback<any>): void;\n  /**\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  sentiment(options: Models.TextAnalyticsClientSentimentOptionalParams, callback: msRest.ServiceCallback<any>): void;\n  sentiment(options?: Models.TextAnalyticsClientSentimentOptionalParams | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.SentimentResponse> {\n    return this.sendOperationRequest(\n      {\n        options\n      },\n      sentimentOperationSpec,\n      callback) as Promise<Models.SentimentResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new msRest.Serializer(Mappers);\nconst detectLanguageOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"languages\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.showStats\n  ],\n  requestBody: {\n    parameterPath: [\n      \"options\",\n      \"languageBatchInput\"\n    ],\n    mapper: Mappers.LanguageBatchInput\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.LanguageBatchResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  serializer\n};\n\nconst entitiesOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"entities\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.showStats\n  ],\n  requestBody: {\n    parameterPath: [\n      \"options\",\n      \"multiLanguageBatchInput\"\n    ],\n    mapper: Mappers.MultiLanguageBatchInput\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.EntitiesBatchResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  serializer\n};\n\nconst keyPhrasesOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"keyPhrases\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.showStats\n  ],\n  requestBody: {\n    parameterPath: [\n      \"options\",\n      \"multiLanguageBatchInput\"\n    ],\n    mapper: Mappers.MultiLanguageBatchInput\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyPhraseBatchResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  serializer\n};\n\nconst sentimentOperationSpec: msRest.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"sentiment\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.showStats\n  ],\n  requestBody: {\n    parameterPath: [\n      \"options\",\n      \"multiLanguageBatchInput\"\n    ],\n    mapper: Mappers.MultiLanguageBatchInput\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.SentimentBatchResult\n    },\n    500: {\n      bodyMapper: Mappers.ErrorResponse\n    },\n    default: {}\n  },\n  serializer\n};\n\nexport {\n  TextAnalyticsClient,\n  TextAnalyticsClientContext,\n  Models as TextAnalyticsModels,\n  Mappers as TextAnalyticsMappers\n};\n"],"names":["msRest.getDefaultUserAgentValue","msRest.ServiceClient","msRest.Serializer","Parameters.endpoint","Parameters.showStats","Mappers.LanguageBatchInput","Mappers.LanguageBatchResult","Mappers.ErrorResponse","Mappers.MultiLanguageBatchInput","Mappers.EntitiesBatchResult","Mappers.KeyPhraseBatchResult","Mappers.SentimentBatchResult"],"mappings":";;;;;;;;;;;;;IAAA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;;IAEA,IAAI,aAAa,GAAG,SAAS,CAAC,EAAE,CAAC,EAAE;IACnC,IAAI,aAAa,GAAG,MAAM,CAAC,cAAc;IACzC,SAAS,EAAE,SAAS,EAAE,EAAE,EAAE,YAAY,KAAK,IAAI,UAAU,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,EAAE,CAAC;IACpF,QAAQ,UAAU,CAAC,EAAE,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IACnF,IAAI,OAAO,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/B,CAAC,CAAC;;AAEF,IAAO,SAAS,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE;IAChC,IAAI,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACxB,IAAI,SAAS,EAAE,GAAG,EAAE,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,EAAE;IAC3C,IAAI,CAAC,CAAC,SAAS,GAAG,CAAC,KAAK,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,SAAS,GAAG,CAAC,CAAC,SAAS,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;IACzF,CAAC;;IC3BD;;;;;;OAMG;;;;;;ICNH;;;;;;;AAWA,IAAO,IAAM,kBAAkB,GAA2B;QACxD,cAAc,EAAE,oBAAoB;QACpC,IAAI,EAAE;YACJ,IAAI,EAAE,WAAW;YACjB,SAAS,EAAE,oBAAoB;YAC/B,eAAe,EAAE;gBACf,QAAQ,EAAE;oBACR,cAAc,EAAE,UAAU;oBAC1B,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;gBACD,EAAE,EAAE;oBACF,cAAc,EAAE,IAAI;oBACpB,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;gBACD,IAAI,EAAE;oBACJ,cAAc,EAAE,MAAM;oBACtB,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;aACF;SACF;KACF,CAAC;AAEF,IAAO,IAAM,uBAAuB,GAA2B;QAC7D,cAAc,EAAE,yBAAyB;QACzC,IAAI,EAAE;YACJ,IAAI,EAAE,WAAW;YACjB,SAAS,EAAE,yBAAyB;YACpC,eAAe,EAAE;gBACf,SAAS,EAAE;oBACT,cAAc,EAAE,WAAW;oBAC3B,IAAI,EAAE;wBACJ,IAAI,EAAE,UAAU;wBAChB,OAAO,EAAE;4BACP,IAAI,EAAE;gCACJ,IAAI,EAAE,WAAW;gCACjB,SAAS,EAAE,oBAAoB;6BAChC;yBACF;qBACF;iBACF;aACF;SACF;KACF,CAAC;AAEF,IAAO,IAAM,WAAW,GAA2B;QACjD,cAAc,EAAE,aAAa;QAC7B,IAAI,EAAE;YACJ,IAAI,EAAE,WAAW;YACjB,SAAS,EAAE,aAAa;YACxB,eAAe,EAAE;gBACf,cAAc,EAAE;oBACd,cAAc,EAAE,gBAAgB;oBAChC,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;gBACD,eAAe,EAAE;oBACf,cAAc,EAAE,iBAAiB;oBACjC,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;gBACD,IAAI,EAAE;oBACJ,cAAc,EAAE,MAAM;oBACtB,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;gBACD,MAAM,EAAE;oBACN,cAAc,EAAE,QAAQ;oBACxB,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;gBACD,MAAM,EAAE;oBACN,cAAc,EAAE,QAAQ;oBACxB,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;aACF;SACF;KACF,CAAC;AAEF,IAAO,IAAM,YAAY,GAA2B;QAClD,cAAc,EAAE,cAAc;QAC9B,IAAI,EAAE;YACJ,IAAI,EAAE,WAAW;YACjB,SAAS,EAAE,cAAc;YACzB,eAAe,EAAE;gBACf,IAAI,EAAE;oBACJ,cAAc,EAAE,MAAM;oBACtB,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;gBACD,OAAO,EAAE;oBACP,cAAc,EAAE,SAAS;oBACzB,IAAI,EAAE;wBACJ,IAAI,EAAE,UAAU;wBAChB,OAAO,EAAE;4BACP,IAAI,EAAE;gCACJ,IAAI,EAAE,WAAW;gCACjB,SAAS,EAAE,aAAa;6BACzB;yBACF;qBACF;iBACF;gBACD,iBAAiB,EAAE;oBACjB,cAAc,EAAE,mBAAmB;oBACnC,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;gBACD,WAAW,EAAE;oBACX,cAAc,EAAE,aAAa;oBAC7B,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;gBACD,YAAY,EAAE;oBACZ,QAAQ,EAAE,IAAI;oBACd,cAAc,EAAE,cAAc;oBAC9B,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;gBACD,MAAM,EAAE;oBACN,cAAc,EAAE,QAAQ;oBACxB,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;gBACD,IAAI,EAAE;oBACJ,cAAc,EAAE,MAAM;oBACtB,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;gBACD,OAAO,EAAE;oBACP,cAAc,EAAE,SAAS;oBACzB,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;aACF;SACF;KACF,CAAC;AAEF,IAAO,IAAM,kBAAkB,GAA2B;QACxD,cAAc,EAAE,oBAAoB;QACpC,IAAI,EAAE;YACJ,IAAI,EAAE,WAAW;YACjB,SAAS,EAAE,oBAAoB;YAC/B,eAAe,EAAE;gBACf,eAAe,EAAE;oBACf,cAAc,EAAE,iBAAiB;oBACjC,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;gBACD,iBAAiB,EAAE;oBACjB,cAAc,EAAE,mBAAmB;oBACnC,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;aACF;SACF;KACF,CAAC;AAEF,IAAO,IAAM,uBAAuB,GAA2B;QAC7D,cAAc,EAAE,yBAAyB;QACzC,IAAI,EAAE;YACJ,IAAI,EAAE,WAAW;YACjB,SAAS,EAAE,yBAAyB;YACpC,eAAe,EAAE;gBACf,EAAE,EAAE;oBACF,cAAc,EAAE,IAAI;oBACpB,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;gBACD,QAAQ,EAAE;oBACR,QAAQ,EAAE,IAAI;oBACd,cAAc,EAAE,UAAU;oBAC1B,IAAI,EAAE;wBACJ,IAAI,EAAE,UAAU;wBAChB,OAAO,EAAE;4BACP,IAAI,EAAE;gCACJ,IAAI,EAAE,WAAW;gCACjB,SAAS,EAAE,cAAc;6BAC1B;yBACF;qBACF;iBACF;gBACD,UAAU,EAAE;oBACV,cAAc,EAAE,YAAY;oBAC5B,IAAI,EAAE;wBACJ,IAAI,EAAE,WAAW;wBACjB,SAAS,EAAE,oBAAoB;qBAChC;iBACF;aACF;SACF;KACF,CAAC;AAEF,IAAO,IAAM,WAAW,GAA2B;QACjD,cAAc,EAAE,aAAa;QAC7B,IAAI,EAAE;YACJ,IAAI,EAAE,WAAW;YACjB,SAAS,EAAE,aAAa;YACxB,eAAe,EAAE;gBACf,EAAE,EAAE;oBACF,cAAc,EAAE,IAAI;oBACpB,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;gBACD,OAAO,EAAE;oBACP,cAAc,EAAE,SAAS;oBACzB,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;aACF;SACF;KACF,CAAC;AAEF,IAAO,IAAM,iBAAiB,GAA2B;QACvD,cAAc,EAAE,mBAAmB;QACnC,IAAI,EAAE;YACJ,IAAI,EAAE,WAAW;YACjB,SAAS,EAAE,mBAAmB;YAC9B,eAAe,EAAE;gBACf,cAAc,EAAE;oBACd,cAAc,EAAE,gBAAgB;oBAChC,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;gBACD,mBAAmB,EAAE;oBACnB,cAAc,EAAE,qBAAqB;oBACrC,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;gBACD,uBAAuB,EAAE;oBACvB,cAAc,EAAE,yBAAyB;oBACzC,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;gBACD,iBAAiB,EAAE;oBACjB,cAAc,EAAE,mBAAmB;oBACnC,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;aACF;SACF;KACF,CAAC;AAEF,IAAO,IAAM,mBAAmB,GAA2B;QACzD,cAAc,EAAE,qBAAqB;QACrC,IAAI,EAAE;YACJ,IAAI,EAAE,WAAW;YACjB,SAAS,EAAE,qBAAqB;YAChC,eAAe,EAAE;gBACf,SAAS,EAAE;oBACT,QAAQ,EAAE,IAAI;oBACd,cAAc,EAAE,WAAW;oBAC3B,IAAI,EAAE;wBACJ,IAAI,EAAE,UAAU;wBAChB,OAAO,EAAE;4BACP,IAAI,EAAE;gCACJ,IAAI,EAAE,WAAW;gCACjB,SAAS,EAAE,yBAAyB;6BACrC;yBACF;qBACF;iBACF;gBACD,MAAM,EAAE;oBACN,QAAQ,EAAE,IAAI;oBACd,cAAc,EAAE,QAAQ;oBACxB,IAAI,EAAE;wBACJ,IAAI,EAAE,UAAU;wBAChB,OAAO,EAAE;4BACP,IAAI,EAAE;gCACJ,IAAI,EAAE,WAAW;gCACjB,SAAS,EAAE,aAAa;6BACzB;yBACF;qBACF;iBACF;gBACD,UAAU,EAAE;oBACV,QAAQ,EAAE,IAAI;oBACd,cAAc,EAAE,YAAY;oBAC5B,IAAI,EAAE;wBACJ,IAAI,EAAE,WAAW;wBACjB,SAAS,EAAE,mBAAmB;qBAC/B;iBACF;aACF;SACF;KACF,CAAC;AAEF,IAAO,IAAM,aAAa,GAA2B;QACnD,cAAc,EAAE,eAAe;QAC/B,IAAI,EAAE;YACJ,IAAI,EAAE,WAAW;YACjB,SAAS,EAAE,eAAe;YAC1B,eAAe,EAAE;gBACf,IAAI,EAAE;oBACJ,cAAc,EAAE,MAAM;oBACtB,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;gBACD,OAAO,EAAE;oBACP,cAAc,EAAE,SAAS;oBACzB,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;gBACD,UAAU,EAAE;oBACV,cAAc,EAAE,YAAY;oBAC5B,IAAI,EAAE;wBACJ,IAAI,EAAE,WAAW;wBACjB,SAAS,EAAE,eAAe;qBAC3B;iBACF;aACF;SACF;KACF,CAAC;AAEF,IAAO,IAAM,aAAa,GAA2B;QACnD,cAAc,EAAE,eAAe;QAC/B,IAAI,EAAE;YACJ,IAAI,EAAE,WAAW;YACjB,SAAS,EAAE,eAAe;YAC1B,eAAe,EAAE;gBACf,IAAI,EAAE;oBACJ,cAAc,EAAE,MAAM;oBACtB,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;gBACD,OAAO,EAAE;oBACP,cAAc,EAAE,SAAS;oBACzB,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;gBACD,MAAM,EAAE;oBACN,cAAc,EAAE,QAAQ;oBACxB,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;gBACD,UAAU,EAAE;oBACV,cAAc,EAAE,YAAY;oBAC5B,IAAI,EAAE;wBACJ,IAAI,EAAE,WAAW;wBACjB,SAAS,EAAE,eAAe;qBAC3B;iBACF;aACF;SACF;KACF,CAAC;AAEF,IAAO,IAAM,wBAAwB,GAA2B;QAC9D,cAAc,EAAE,0BAA0B;QAC1C,IAAI,EAAE;YACJ,IAAI,EAAE,WAAW;YACjB,SAAS,EAAE,0BAA0B;YACrC,eAAe,EAAE;gBACf,EAAE,EAAE;oBACF,cAAc,EAAE,IAAI;oBACpB,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;gBACD,UAAU,EAAE;oBACV,QAAQ,EAAE,IAAI;oBACd,cAAc,EAAE,YAAY;oBAC5B,IAAI,EAAE;wBACJ,IAAI,EAAE,UAAU;wBAChB,OAAO,EAAE;4BACP,IAAI,EAAE;gCACJ,IAAI,EAAE,QAAQ;6BACf;yBACF;qBACF;iBACF;gBACD,UAAU,EAAE;oBACV,cAAc,EAAE,YAAY;oBAC5B,IAAI,EAAE;wBACJ,IAAI,EAAE,WAAW;wBACjB,SAAS,EAAE,oBAAoB;qBAChC;iBACF;aACF;SACF;KACF,CAAC;AAEF,IAAO,IAAM,oBAAoB,GAA2B;QAC1D,cAAc,EAAE,sBAAsB;QACtC,IAAI,EAAE;YACJ,IAAI,EAAE,WAAW;YACjB,SAAS,EAAE,sBAAsB;YACjC,eAAe,EAAE;gBACf,SAAS,EAAE;oBACT,QAAQ,EAAE,IAAI;oBACd,cAAc,EAAE,WAAW;oBAC3B,IAAI,EAAE;wBACJ,IAAI,EAAE,UAAU;wBAChB,OAAO,EAAE;4BACP,IAAI,EAAE;gCACJ,IAAI,EAAE,WAAW;gCACjB,SAAS,EAAE,0BAA0B;6BACtC;yBACF;qBACF;iBACF;gBACD,MAAM,EAAE;oBACN,QAAQ,EAAE,IAAI;oBACd,cAAc,EAAE,QAAQ;oBACxB,IAAI,EAAE;wBACJ,IAAI,EAAE,UAAU;wBAChB,OAAO,EAAE;4BACP,IAAI,EAAE;gCACJ,IAAI,EAAE,WAAW;gCACjB,SAAS,EAAE,aAAa;6BACzB;yBACF;qBACF;iBACF;gBACD,UAAU,EAAE;oBACV,QAAQ,EAAE,IAAI;oBACd,cAAc,EAAE,YAAY;oBAC5B,IAAI,EAAE;wBACJ,IAAI,EAAE,WAAW;wBACjB,SAAS,EAAE,mBAAmB;qBAC/B;iBACF;aACF;SACF;KACF,CAAC;AAEF,IAAO,IAAM,aAAa,GAA2B;QACnD,cAAc,EAAE,eAAe;QAC/B,IAAI,EAAE;YACJ,IAAI,EAAE,WAAW;YACjB,SAAS,EAAE,eAAe;YAC1B,eAAe,EAAE;gBACf,WAAW,EAAE;oBACX,cAAc,EAAE,aAAa;oBAC7B,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;gBACD,EAAE,EAAE;oBACF,cAAc,EAAE,IAAI;oBACpB,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;gBACD,IAAI,EAAE;oBACJ,cAAc,EAAE,MAAM;oBACtB,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;aACF;SACF;KACF,CAAC;AAEF,IAAO,IAAM,kBAAkB,GAA2B;QACxD,cAAc,EAAE,oBAAoB;QACpC,IAAI,EAAE;YACJ,IAAI,EAAE,WAAW;YACjB,SAAS,EAAE,oBAAoB;YAC/B,eAAe,EAAE;gBACf,SAAS,EAAE;oBACT,cAAc,EAAE,WAAW;oBAC3B,IAAI,EAAE;wBACJ,IAAI,EAAE,UAAU;wBAChB,OAAO,EAAE;4BACP,IAAI,EAAE;gCACJ,IAAI,EAAE,WAAW;gCACjB,SAAS,EAAE,eAAe;6BAC3B;yBACF;qBACF;iBACF;aACF;SACF;KACF,CAAC;AAEF,IAAO,IAAM,gBAAgB,GAA2B;QACtD,cAAc,EAAE,kBAAkB;QAClC,IAAI,EAAE;YACJ,IAAI,EAAE,WAAW;YACjB,SAAS,EAAE,kBAAkB;YAC7B,eAAe,EAAE;gBACf,IAAI,EAAE;oBACJ,cAAc,EAAE,MAAM;oBACtB,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;gBACD,WAAW,EAAE;oBACX,cAAc,EAAE,aAAa;oBAC7B,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;gBACD,KAAK,EAAE;oBACL,cAAc,EAAE,OAAO;oBACvB,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;aACF;SACF;KACF,CAAC;AAEF,IAAO,IAAM,uBAAuB,GAA2B;QAC7D,cAAc,EAAE,yBAAyB;QACzC,IAAI,EAAE;YACJ,IAAI,EAAE,WAAW;YACjB,SAAS,EAAE,yBAAyB;YACpC,eAAe,EAAE;gBACf,EAAE,EAAE;oBACF,cAAc,EAAE,IAAI;oBACpB,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;gBACD,iBAAiB,EAAE;oBACjB,cAAc,EAAE,mBAAmB;oBACnC,IAAI,EAAE;wBACJ,IAAI,EAAE,UAAU;wBAChB,OAAO,EAAE;4BACP,IAAI,EAAE;gCACJ,IAAI,EAAE,WAAW;gCACjB,SAAS,EAAE,kBAAkB;6BAC9B;yBACF;qBACF;iBACF;gBACD,UAAU,EAAE;oBACV,cAAc,EAAE,YAAY;oBAC5B,IAAI,EAAE;wBACJ,IAAI,EAAE,WAAW;wBACjB,SAAS,EAAE,oBAAoB;qBAChC;iBACF;aACF;SACF;KACF,CAAC;AAEF,IAAO,IAAM,mBAAmB,GAA2B;QACzD,cAAc,EAAE,qBAAqB;QACrC,IAAI,EAAE;YACJ,IAAI,EAAE,WAAW;YACjB,SAAS,EAAE,qBAAqB;YAChC,eAAe,EAAE;gBACf,SAAS,EAAE;oBACT,QAAQ,EAAE,IAAI;oBACd,cAAc,EAAE,WAAW;oBAC3B,IAAI,EAAE;wBACJ,IAAI,EAAE,UAAU;wBAChB,OAAO,EAAE;4BACP,IAAI,EAAE;gCACJ,IAAI,EAAE,WAAW;gCACjB,SAAS,EAAE,yBAAyB;6BACrC;yBACF;qBACF;iBACF;gBACD,MAAM,EAAE;oBACN,QAAQ,EAAE,IAAI;oBACd,cAAc,EAAE,QAAQ;oBACxB,IAAI,EAAE;wBACJ,IAAI,EAAE,UAAU;wBAChB,OAAO,EAAE;4BACP,IAAI,EAAE;gCACJ,IAAI,EAAE,WAAW;gCACjB,SAAS,EAAE,aAAa;6BACzB;yBACF;qBACF;iBACF;gBACD,UAAU,EAAE;oBACV,QAAQ,EAAE,IAAI;oBACd,cAAc,EAAE,YAAY;oBAC5B,IAAI,EAAE;wBACJ,IAAI,EAAE,WAAW;wBACjB,SAAS,EAAE,mBAAmB;qBAC/B;iBACF;aACF;SACF;KACF,CAAC;AAEF,IAAO,IAAM,wBAAwB,GAA2B;QAC9D,cAAc,EAAE,0BAA0B;QAC1C,IAAI,EAAE;YACJ,IAAI,EAAE,WAAW;YACjB,SAAS,EAAE,0BAA0B;YACrC,eAAe,EAAE;gBACf,EAAE,EAAE;oBACF,cAAc,EAAE,IAAI;oBACpB,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;gBACD,KAAK,EAAE;oBACL,cAAc,EAAE,OAAO;oBACvB,IAAI,EAAE;wBACJ,IAAI,EAAE,QAAQ;qBACf;iBACF;gBACD,UAAU,EAAE;oBACV,cAAc,EAAE,YAAY;oBAC5B,IAAI,EAAE;wBACJ,IAAI,EAAE,WAAW;wBACjB,SAAS,EAAE,oBAAoB;qBAChC;iBACF;aACF;SACF;KACF,CAAC;AAEF,IAAO,IAAM,oBAAoB,GAA2B;QAC1D,cAAc,EAAE,sBAAsB;QACtC,IAAI,EAAE;YACJ,IAAI,EAAE,WAAW;YACjB,SAAS,EAAE,sBAAsB;YACjC,eAAe,EAAE;gBACf,SAAS,EAAE;oBACT,QAAQ,EAAE,IAAI;oBACd,cAAc,EAAE,WAAW;oBAC3B,IAAI,EAAE;wBACJ,IAAI,EAAE,UAAU;wBAChB,OAAO,EAAE;4BACP,IAAI,EAAE;gCACJ,IAAI,EAAE,WAAW;gCACjB,SAAS,EAAE,0BAA0B;6BACtC;yBACF;qBACF;iBACF;gBACD,MAAM,EAAE;oBACN,QAAQ,EAAE,IAAI;oBACd,cAAc,EAAE,QAAQ;oBACxB,IAAI,EAAE;wBACJ,IAAI,EAAE,UAAU;wBAChB,OAAO,EAAE;4BACP,IAAI,EAAE;gCACJ,IAAI,EAAE,WAAW;gCACjB,SAAS,EAAE,aAAa;6BACzB;yBACF;qBACF;iBACF;gBACD,UAAU,EAAE;oBACV,QAAQ,EAAE,IAAI;oBACd,cAAc,EAAE,YAAY;oBAC5B,IAAI,EAAE;wBACJ,IAAI,EAAE,WAAW;wBACjB,SAAS,EAAE,mBAAmB;qBAC/B;iBACF;aACF;SACF;KACF,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;ICvrBF;;;;;;;;;AAYA,IAAO,IAAM,QAAQ,GAAiC;QACpD,aAAa,EAAE,UAAU;QACzB,MAAM,EAAE;YACN,QAAQ,EAAE,IAAI;YACd,cAAc,EAAE,UAAU;YAC1B,YAAY,EAAE,EAAE;YAChB,IAAI,EAAE;gBACJ,IAAI,EAAE,QAAQ;aACf;SACF;QACD,YAAY,EAAE,IAAI;KACnB,CAAC;AACF,IAAO,IAAM,SAAS,GAAmC;QACvD,aAAa,EAAE;YACb,SAAS;YACT,WAAW;SACZ;QACD,MAAM,EAAE;YACN,cAAc,EAAE,WAAW;YAC3B,IAAI,EAAE;gBACJ,IAAI,EAAE,SAAS;aAChB;SACF;KACF,CAAC;;ICnCF;;;;;;;;;IAYA,IAAM,WAAW,GAAG,wCAAwC,CAAC;IAC7D,IAAM,cAAc,GAAG,OAAO,CAAC;AAE/B;QAAgD,8CAAoB;;;;;;;;QAWlE,oCAAY,WAA4C,EAAE,QAAgB,EAAE,OAAqC;YAAjH,iBAuBC;YAtBC,IAAI,QAAQ,IAAI,SAAS,EAAE;gBACzB,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;aAC/C;YACD,IAAI,WAAW,IAAI,SAAS,EAAE;gBAC5B,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;aAClD;YAED,IAAI,CAAC,OAAO,EAAE;gBACZ,OAAO,GAAG,EAAE,CAAC;aACd;YAED,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;gBACtB,IAAM,gBAAgB,GAAGA,+BAA+B,EAAE,CAAC;gBAC3D,OAAO,CAAC,SAAS,GAAM,WAAW,SAAI,cAAc,SAAI,gBAAkB,CAAC;aAC5E;YAED,QAAA,kBAAM,WAAW,EAAE,OAAO,CAAC,SAAC;YAE5B,KAAI,CAAC,OAAO,GAAG,gCAAgC,CAAC;YAChD,KAAI,CAAC,kBAAkB,GAAG,iCAAiC,CAAC;YAC5D,KAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;YACzB,KAAI,CAAC,WAAW,GAAG,WAAW,CAAC;;SAChC;QACH,iCAAC;IAAD,CAAC,CAnC+CC,oBAAoB;;ICfpE;;;;;;;;;;QAgBkC,uCAA0B;;;;;;;;QAQ1D,6BAAY,WAA4C,EAAE,QAAgB,EAAE,OAAqC;mBAC/G,kBAAM,WAAW,EAAE,QAAQ,EAAE,OAAO,CAAC;SACtC;QAmBD,4CAAc,GAAd,UAAe,OAAqH,EAAE,QAA6D;YACjM,OAAO,IAAI,CAAC,oBAAoB,CAC9B;gBACE,OAAO,SAAA;aACR,EACD,2BAA2B,EAC3B,QAAQ,CAA2C,CAAC;SACvD;QAqBD,sCAAQ,GAAR,UAAS,OAA+G,EAAE,QAA6D;YACrL,OAAO,IAAI,CAAC,oBAAoB,CAC9B;gBACE,OAAO,SAAA;aACR,EACD,qBAAqB,EACrB,QAAQ,CAAqC,CAAC;SACjD;QAqBD,wCAAU,GAAV,UAAW,OAAkH,EAAE,QAA8D;YAC3L,OAAO,IAAI,CAAC,oBAAoB,CAC9B;gBACE,OAAO,SAAA;aACR,EACD,uBAAuB,EACvB,QAAQ,CAAuC,CAAC;SACnD;QAsBD,uCAAS,GAAT,UAAU,OAAyF,EAAE,QAAsC;YACzI,OAAO,IAAI,CAAC,oBAAoB,CAC9B;gBACE,OAAO,SAAA;aACR,EACD,sBAAsB,EACtB,QAAQ,CAAsC,CAAC;SAClD;QACH,0BAAC;IAAD,CA1HA,CAAkC,0BAA0B,GA0H3D;IAED;IACA,IAAM,UAAU,GAAG,IAAIC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IAClD,IAAM,2BAA2B,GAAyB;QACxD,UAAU,EAAE,MAAM;QAClB,IAAI,EAAE,WAAW;QACjB,aAAa,EAAE;YACbC,QAAmB;SACpB;QACD,eAAe,EAAE;YACfC,SAAoB;SACrB;QACD,WAAW,EAAE;YACX,aAAa,EAAE;gBACb,SAAS;gBACT,oBAAoB;aACrB;YACD,MAAM,EAAEC,kBAA0B;SACnC;QACD,SAAS,EAAE;YACT,GAAG,EAAE;gBACH,UAAU,EAAEC,mBAA2B;aACxC;YACD,OAAO,EAAE;gBACP,UAAU,EAAEC,aAAqB;aAClC;SACF;QACD,UAAU,YAAA;KACX,CAAC;IAEF,IAAM,qBAAqB,GAAyB;QAClD,UAAU,EAAE,MAAM;QAClB,IAAI,EAAE,UAAU;QAChB,aAAa,EAAE;YACbJ,QAAmB;SACpB;QACD,eAAe,EAAE;YACfC,SAAoB;SACrB;QACD,WAAW,EAAE;YACX,aAAa,EAAE;gBACb,SAAS;gBACT,yBAAyB;aAC1B;YACD,MAAM,EAAEI,uBAA+B;SACxC;QACD,SAAS,EAAE;YACT,GAAG,EAAE;gBACH,UAAU,EAAEC,mBAA2B;aACxC;YACD,OAAO,EAAE;gBACP,UAAU,EAAEF,aAAqB;aAClC;SACF;QACD,UAAU,YAAA;KACX,CAAC;IAEF,IAAM,uBAAuB,GAAyB;QACpD,UAAU,EAAE,MAAM;QAClB,IAAI,EAAE,YAAY;QAClB,aAAa,EAAE;YACbJ,QAAmB;SACpB;QACD,eAAe,EAAE;YACfC,SAAoB;SACrB;QACD,WAAW,EAAE;YACX,aAAa,EAAE;gBACb,SAAS;gBACT,yBAAyB;aAC1B;YACD,MAAM,EAAEI,uBAA+B;SACxC;QACD,SAAS,EAAE;YACT,GAAG,EAAE;gBACH,UAAU,EAAEE,oBAA4B;aACzC;YACD,OAAO,EAAE;gBACP,UAAU,EAAEH,aAAqB;aAClC;SACF;QACD,UAAU,YAAA;KACX,CAAC;IAEF,IAAM,sBAAsB,GAAyB;QACnD,UAAU,EAAE,MAAM;QAClB,IAAI,EAAE,WAAW;QACjB,aAAa,EAAE;YACbJ,QAAmB;SACpB;QACD,eAAe,EAAE;YACfC,SAAoB;SACrB;QACD,WAAW,EAAE;YACX,aAAa,EAAE;gBACb,SAAS;gBACT,yBAAyB;aAC1B;YACD,MAAM,EAAEI,uBAA+B;SACxC;QACD,SAAS,EAAE;YACT,GAAG,EAAE;gBACH,UAAU,EAAEG,oBAA4B;aACzC;YACD,GAAG,EAAE;gBACH,UAAU,EAAEJ,aAAqB;aAClC;YACD,OAAO,EAAE,EAAE;SACZ;QACD,UAAU,YAAA;KACX,CAAC;;;;;;;;;;;;;;;"}