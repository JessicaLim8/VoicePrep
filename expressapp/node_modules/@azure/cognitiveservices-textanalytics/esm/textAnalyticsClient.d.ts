import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import { TextAnalyticsClientContext } from "./textAnalyticsClientContext";
declare class TextAnalyticsClient extends TextAnalyticsClientContext {
    /**
     * Initializes a new instance of the TextAnalyticsClient class.
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://westus.api.cognitive.microsoft.com).
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param [options] The parameter options
     */
    constructor(credentials: msRest.ServiceClientCredentials, endpoint: string, options?: msRest.ServiceClientOptions);
    /**
     * Scores close to 1 indicate 100% certainty that the identified language is true. A total of 120
     * languages are supported.
     * @summary The API returns the detected language and a numeric score between 0 and 1.
     * @param [options] The optional parameters
     * @returns Promise<Models.DetectLanguageResponse>
     */
    detectLanguage(options?: Models.TextAnalyticsClientDetectLanguageOptionalParams): Promise<Models.DetectLanguageResponse>;
    /**
     * @param callback The callback
     */
    detectLanguage(callback: msRest.ServiceCallback<Models.LanguageBatchResult>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    detectLanguage(options: Models.TextAnalyticsClientDetectLanguageOptionalParams, callback: msRest.ServiceCallback<Models.LanguageBatchResult>): void;
    /**
     * To get even more information on each recognized entity we recommend using the Bing Entity Search
     * API by querying for the recognized entities names. See the <a
     * href="https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/text-analytics-supported-languages">Supported
     * languages in Text Analytics API</a> for the list of enabled languages.
     * @summary The API returns a list of recognized entities in a given document.
     * @param [options] The optional parameters
     * @returns Promise<Models.EntitiesResponse>
     */
    entities(options?: Models.TextAnalyticsClientEntitiesOptionalParams): Promise<Models.EntitiesResponse>;
    /**
     * @param callback The callback
     */
    entities(callback: msRest.ServiceCallback<Models.EntitiesBatchResult>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    entities(options: Models.TextAnalyticsClientEntitiesOptionalParams, callback: msRest.ServiceCallback<Models.EntitiesBatchResult>): void;
    /**
     * See the <a
     * href="https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview#supported-languages">Text
     * Analytics Documentation</a> for details about the languages that are supported by key phrase
     * extraction.
     * @summary The API returns a list of strings denoting the key talking points in the input text.
     * @param [options] The optional parameters
     * @returns Promise<Models.KeyPhrasesResponse>
     */
    keyPhrases(options?: Models.TextAnalyticsClientKeyPhrasesOptionalParams): Promise<Models.KeyPhrasesResponse>;
    /**
     * @param callback The callback
     */
    keyPhrases(callback: msRest.ServiceCallback<Models.KeyPhraseBatchResult>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    keyPhrases(options: Models.TextAnalyticsClientKeyPhrasesOptionalParams, callback: msRest.ServiceCallback<Models.KeyPhraseBatchResult>): void;
    /**
     * Scores close to 1 indicate positive sentiment, while scores close to 0 indicate negative
     * sentiment. A score of 0.5 indicates the lack of sentiment (e.g. a factoid statement). See the <a
     * href="https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/overview#supported-languages">Text
     * Analytics Documentation</a> for details about the languages that are supported by sentiment
     * analysis.
     * @summary The API returns a numeric score between 0 and 1.
     * @param [options] The optional parameters
     * @returns Promise<Models.SentimentResponse>
     */
    sentiment(options?: Models.TextAnalyticsClientSentimentOptionalParams): Promise<Models.SentimentResponse>;
    /**
     * @param callback The callback
     */
    sentiment(callback: msRest.ServiceCallback<any>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    sentiment(options: Models.TextAnalyticsClientSentimentOptionalParams, callback: msRest.ServiceCallback<any>): void;
}
export { TextAnalyticsClient, TextAnalyticsClientContext, Models as TextAnalyticsModels, Mappers as TextAnalyticsMappers };
//# sourceMappingURL=textAnalyticsClient.d.ts.map