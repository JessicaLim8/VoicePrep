/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/ms-rest-js'], factory) :
    (global = global || self, factory((global.Azure = global.Azure || {}, global.Azure.CognitiveservicesTextanalytics = {}), global.msRest));
}(this, function (exports, msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({

    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    var MultiLanguageInput = {
        serializedName: "MultiLanguageInput",
        type: {
            name: "Composite",
            className: "MultiLanguageInput",
            modelProperties: {
                language: {
                    serializedName: "language",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                text: {
                    serializedName: "text",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var MultiLanguageBatchInput = {
        serializedName: "MultiLanguageBatchInput",
        type: {
            name: "Composite",
            className: "MultiLanguageBatchInput",
            modelProperties: {
                documents: {
                    serializedName: "documents",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MultiLanguageInput"
                            }
                        }
                    }
                }
            }
        }
    };
    var MatchRecord = {
        serializedName: "MatchRecord",
        type: {
            name: "Composite",
            className: "MatchRecord",
            modelProperties: {
                wikipediaScore: {
                    serializedName: "wikipediaScore",
                    type: {
                        name: "Number"
                    }
                },
                entityTypeScore: {
                    serializedName: "entityTypeScore",
                    type: {
                        name: "Number"
                    }
                },
                text: {
                    serializedName: "text",
                    type: {
                        name: "String"
                    }
                },
                offset: {
                    serializedName: "offset",
                    type: {
                        name: "Number"
                    }
                },
                length: {
                    serializedName: "length",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var EntityRecord = {
        serializedName: "EntityRecord",
        type: {
            name: "Composite",
            className: "EntityRecord",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                matches: {
                    serializedName: "matches",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MatchRecord"
                            }
                        }
                    }
                },
                wikipediaLanguage: {
                    serializedName: "wikipediaLanguage",
                    type: {
                        name: "String"
                    }
                },
                wikipediaId: {
                    serializedName: "wikipediaId",
                    type: {
                        name: "String"
                    }
                },
                wikipediaUrl: {
                    readOnly: true,
                    serializedName: "wikipediaUrl",
                    type: {
                        name: "String"
                    }
                },
                bingId: {
                    serializedName: "bingId",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                subType: {
                    serializedName: "subType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var DocumentStatistics = {
        serializedName: "DocumentStatistics",
        type: {
            name: "Composite",
            className: "DocumentStatistics",
            modelProperties: {
                charactersCount: {
                    serializedName: "charactersCount",
                    type: {
                        name: "Number"
                    }
                },
                transactionsCount: {
                    serializedName: "transactionsCount",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var EntitiesBatchResultItem = {
        serializedName: "EntitiesBatchResultItem",
        type: {
            name: "Composite",
            className: "EntitiesBatchResultItem",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                entities: {
                    readOnly: true,
                    serializedName: "entities",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EntityRecord"
                            }
                        }
                    }
                },
                statistics: {
                    serializedName: "statistics",
                    type: {
                        name: "Composite",
                        className: "DocumentStatistics"
                    }
                }
            }
        }
    };
    var ErrorRecord = {
        serializedName: "ErrorRecord",
        type: {
            name: "Composite",
            className: "ErrorRecord",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RequestStatistics = {
        serializedName: "RequestStatistics",
        type: {
            name: "Composite",
            className: "RequestStatistics",
            modelProperties: {
                documentsCount: {
                    serializedName: "documentsCount",
                    type: {
                        name: "Number"
                    }
                },
                validDocumentsCount: {
                    serializedName: "validDocumentsCount",
                    type: {
                        name: "Number"
                    }
                },
                erroneousDocumentsCount: {
                    serializedName: "erroneousDocumentsCount",
                    type: {
                        name: "Number"
                    }
                },
                transactionsCount: {
                    serializedName: "transactionsCount",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var EntitiesBatchResult = {
        serializedName: "EntitiesBatchResult",
        type: {
            name: "Composite",
            className: "EntitiesBatchResult",
            modelProperties: {
                documents: {
                    readOnly: true,
                    serializedName: "documents",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EntitiesBatchResultItem"
                            }
                        }
                    }
                },
                errors: {
                    readOnly: true,
                    serializedName: "errors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ErrorRecord"
                            }
                        }
                    }
                },
                statistics: {
                    readOnly: true,
                    serializedName: "statistics",
                    type: {
                        name: "Composite",
                        className: "RequestStatistics"
                    }
                }
            }
        }
    };
    var InternalError = {
        serializedName: "InternalError",
        type: {
            name: "Composite",
            className: "InternalError",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                innerError: {
                    serializedName: "innerError",
                    type: {
                        name: "Composite",
                        className: "InternalError"
                    }
                }
            }
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                code: {
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                target: {
                    serializedName: "target",
                    type: {
                        name: "String"
                    }
                },
                innerError: {
                    serializedName: "innerError",
                    type: {
                        name: "Composite",
                        className: "InternalError"
                    }
                }
            }
        }
    };
    var KeyPhraseBatchResultItem = {
        serializedName: "KeyPhraseBatchResultItem",
        type: {
            name: "Composite",
            className: "KeyPhraseBatchResultItem",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                keyPhrases: {
                    readOnly: true,
                    serializedName: "keyPhrases",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                statistics: {
                    serializedName: "statistics",
                    type: {
                        name: "Composite",
                        className: "DocumentStatistics"
                    }
                }
            }
        }
    };
    var KeyPhraseBatchResult = {
        serializedName: "KeyPhraseBatchResult",
        type: {
            name: "Composite",
            className: "KeyPhraseBatchResult",
            modelProperties: {
                documents: {
                    readOnly: true,
                    serializedName: "documents",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "KeyPhraseBatchResultItem"
                            }
                        }
                    }
                },
                errors: {
                    readOnly: true,
                    serializedName: "errors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ErrorRecord"
                            }
                        }
                    }
                },
                statistics: {
                    readOnly: true,
                    serializedName: "statistics",
                    type: {
                        name: "Composite",
                        className: "RequestStatistics"
                    }
                }
            }
        }
    };
    var LanguageInput = {
        serializedName: "LanguageInput",
        type: {
            name: "Composite",
            className: "LanguageInput",
            modelProperties: {
                countryHint: {
                    serializedName: "countryHint",
                    type: {
                        name: "String"
                    }
                },
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                text: {
                    serializedName: "text",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LanguageBatchInput = {
        serializedName: "LanguageBatchInput",
        type: {
            name: "Composite",
            className: "LanguageBatchInput",
            modelProperties: {
                documents: {
                    serializedName: "documents",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LanguageInput"
                            }
                        }
                    }
                }
            }
        }
    };
    var DetectedLanguage = {
        serializedName: "DetectedLanguage",
        type: {
            name: "Composite",
            className: "DetectedLanguage",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                iso6391Name: {
                    serializedName: "iso6391Name",
                    type: {
                        name: "String"
                    }
                },
                score: {
                    serializedName: "score",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var LanguageBatchResultItem = {
        serializedName: "LanguageBatchResultItem",
        type: {
            name: "Composite",
            className: "LanguageBatchResultItem",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                detectedLanguages: {
                    serializedName: "detectedLanguages",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DetectedLanguage"
                            }
                        }
                    }
                },
                statistics: {
                    serializedName: "statistics",
                    type: {
                        name: "Composite",
                        className: "DocumentStatistics"
                    }
                }
            }
        }
    };
    var LanguageBatchResult = {
        serializedName: "LanguageBatchResult",
        type: {
            name: "Composite",
            className: "LanguageBatchResult",
            modelProperties: {
                documents: {
                    readOnly: true,
                    serializedName: "documents",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LanguageBatchResultItem"
                            }
                        }
                    }
                },
                errors: {
                    readOnly: true,
                    serializedName: "errors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ErrorRecord"
                            }
                        }
                    }
                },
                statistics: {
                    readOnly: true,
                    serializedName: "statistics",
                    type: {
                        name: "Composite",
                        className: "RequestStatistics"
                    }
                }
            }
        }
    };
    var SentimentBatchResultItem = {
        serializedName: "SentimentBatchResultItem",
        type: {
            name: "Composite",
            className: "SentimentBatchResultItem",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                score: {
                    serializedName: "score",
                    type: {
                        name: "Number"
                    }
                },
                statistics: {
                    serializedName: "statistics",
                    type: {
                        name: "Composite",
                        className: "DocumentStatistics"
                    }
                }
            }
        }
    };
    var SentimentBatchResult = {
        serializedName: "SentimentBatchResult",
        type: {
            name: "Composite",
            className: "SentimentBatchResult",
            modelProperties: {
                documents: {
                    readOnly: true,
                    serializedName: "documents",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SentimentBatchResultItem"
                            }
                        }
                    }
                },
                errors: {
                    readOnly: true,
                    serializedName: "errors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ErrorRecord"
                            }
                        }
                    }
                },
                statistics: {
                    readOnly: true,
                    serializedName: "statistics",
                    type: {
                        name: "Composite",
                        className: "RequestStatistics"
                    }
                }
            }
        }
    };

    var Mappers = /*#__PURE__*/Object.freeze({
        MultiLanguageInput: MultiLanguageInput,
        MultiLanguageBatchInput: MultiLanguageBatchInput,
        MatchRecord: MatchRecord,
        EntityRecord: EntityRecord,
        DocumentStatistics: DocumentStatistics,
        EntitiesBatchResultItem: EntitiesBatchResultItem,
        ErrorRecord: ErrorRecord,
        RequestStatistics: RequestStatistics,
        EntitiesBatchResult: EntitiesBatchResult,
        InternalError: InternalError,
        ErrorResponse: ErrorResponse,
        KeyPhraseBatchResultItem: KeyPhraseBatchResultItem,
        KeyPhraseBatchResult: KeyPhraseBatchResult,
        LanguageInput: LanguageInput,
        LanguageBatchInput: LanguageBatchInput,
        DetectedLanguage: DetectedLanguage,
        LanguageBatchResultItem: LanguageBatchResultItem,
        LanguageBatchResult: LanguageBatchResult,
        SentimentBatchResultItem: SentimentBatchResultItem,
        SentimentBatchResult: SentimentBatchResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var endpoint = {
        parameterPath: "endpoint",
        mapper: {
            required: true,
            serializedName: "Endpoint",
            defaultValue: '',
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var showStats = {
        parameterPath: [
            "options",
            "showStats"
        ],
        mapper: {
            serializedName: "showStats",
            type: {
                name: "Boolean"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/cognitiveservices-textanalytics";
    var packageVersion = "4.0.0";
    var TextAnalyticsClientContext = /** @class */ (function (_super) {
        __extends(TextAnalyticsClientContext, _super);
        /**
         * Initializes a new instance of the TextAnalyticsClientContext class.
         * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
         * https://westus.api.cognitive.microsoft.com).
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param [options] The parameter options
         */
        function TextAnalyticsClientContext(credentials, endpoint, options) {
            var _this = this;
            if (endpoint == undefined) {
                throw new Error("'endpoint' cannot be null.");
            }
            if (credentials == undefined) {
                throw new Error("'credentials' cannot be null.");
            }
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                var defaultUserAgent = msRest.getDefaultUserAgentValue();
                options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
            }
            _this = _super.call(this, credentials, options) || this;
            _this.baseUri = "{Endpoint}/text/analytics/v2.1";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.endpoint = endpoint;
            _this.credentials = credentials;
            return _this;
        }
        return TextAnalyticsClientContext;
    }(msRest.ServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var TextAnalyticsClient = /** @class */ (function (_super) {
        __extends(TextAnalyticsClient, _super);
        /**
         * Initializes a new instance of the TextAnalyticsClient class.
         * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
         * https://westus.api.cognitive.microsoft.com).
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param [options] The parameter options
         */
        function TextAnalyticsClient(credentials, endpoint, options) {
            return _super.call(this, credentials, endpoint, options) || this;
        }
        TextAnalyticsClient.prototype.detectLanguage = function (options, callback) {
            return this.sendOperationRequest({
                options: options
            }, detectLanguageOperationSpec, callback);
        };
        TextAnalyticsClient.prototype.entities = function (options, callback) {
            return this.sendOperationRequest({
                options: options
            }, entitiesOperationSpec, callback);
        };
        TextAnalyticsClient.prototype.keyPhrases = function (options, callback) {
            return this.sendOperationRequest({
                options: options
            }, keyPhrasesOperationSpec, callback);
        };
        TextAnalyticsClient.prototype.sentiment = function (options, callback) {
            return this.sendOperationRequest({
                options: options
            }, sentimentOperationSpec, callback);
        };
        return TextAnalyticsClient;
    }(TextAnalyticsClientContext));
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var detectLanguageOperationSpec = {
        httpMethod: "POST",
        path: "languages",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            showStats
        ],
        requestBody: {
            parameterPath: [
                "options",
                "languageBatchInput"
            ],
            mapper: LanguageBatchInput
        },
        responses: {
            200: {
                bodyMapper: LanguageBatchResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var entitiesOperationSpec = {
        httpMethod: "POST",
        path: "entities",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            showStats
        ],
        requestBody: {
            parameterPath: [
                "options",
                "multiLanguageBatchInput"
            ],
            mapper: MultiLanguageBatchInput
        },
        responses: {
            200: {
                bodyMapper: EntitiesBatchResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var keyPhrasesOperationSpec = {
        httpMethod: "POST",
        path: "keyPhrases",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            showStats
        ],
        requestBody: {
            parameterPath: [
                "options",
                "multiLanguageBatchInput"
            ],
            mapper: MultiLanguageBatchInput
        },
        responses: {
            200: {
                bodyMapper: KeyPhraseBatchResult
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer
    };
    var sentimentOperationSpec = {
        httpMethod: "POST",
        path: "sentiment",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            showStats
        ],
        requestBody: {
            parameterPath: [
                "options",
                "multiLanguageBatchInput"
            ],
            mapper: MultiLanguageBatchInput
        },
        responses: {
            200: {
                bodyMapper: SentimentBatchResult
            },
            500: {
                bodyMapper: ErrorResponse
            },
            default: {}
        },
        serializer: serializer
    };

    exports.TextAnalyticsClient = TextAnalyticsClient;
    exports.TextAnalyticsClientContext = TextAnalyticsClientContext;
    exports.TextAnalyticsMappers = Mappers;
    exports.TextAnalyticsModels = index;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=cognitiveservices-textanalytics.js.map
