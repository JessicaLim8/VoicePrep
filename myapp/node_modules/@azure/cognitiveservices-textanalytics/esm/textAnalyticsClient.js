/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __extends } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { TextAnalyticsClientContext } from "./textAnalyticsClientContext";
var TextAnalyticsClient = /** @class */ (function (_super) {
    __extends(TextAnalyticsClient, _super);
    /**
     * Initializes a new instance of the TextAnalyticsClient class.
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://westus.api.cognitive.microsoft.com).
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param [options] The parameter options
     */
    function TextAnalyticsClient(credentials, endpoint, options) {
        return _super.call(this, credentials, endpoint, options) || this;
    }
    TextAnalyticsClient.prototype.detectLanguage = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, detectLanguageOperationSpec, callback);
    };
    TextAnalyticsClient.prototype.entities = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, entitiesOperationSpec, callback);
    };
    TextAnalyticsClient.prototype.keyPhrases = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, keyPhrasesOperationSpec, callback);
    };
    TextAnalyticsClient.prototype.sentiment = function (options, callback) {
        return this.sendOperationRequest({
            options: options
        }, sentimentOperationSpec, callback);
    };
    return TextAnalyticsClient;
}(TextAnalyticsClientContext));
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var detectLanguageOperationSpec = {
    httpMethod: "POST",
    path: "languages",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.showStats
    ],
    requestBody: {
        parameterPath: [
            "options",
            "languageBatchInput"
        ],
        mapper: Mappers.LanguageBatchInput
    },
    responses: {
        200: {
            bodyMapper: Mappers.LanguageBatchResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var entitiesOperationSpec = {
    httpMethod: "POST",
    path: "entities",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.showStats
    ],
    requestBody: {
        parameterPath: [
            "options",
            "multiLanguageBatchInput"
        ],
        mapper: Mappers.MultiLanguageBatchInput
    },
    responses: {
        200: {
            bodyMapper: Mappers.EntitiesBatchResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var keyPhrasesOperationSpec = {
    httpMethod: "POST",
    path: "keyPhrases",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.showStats
    ],
    requestBody: {
        parameterPath: [
            "options",
            "multiLanguageBatchInput"
        ],
        mapper: Mappers.MultiLanguageBatchInput
    },
    responses: {
        200: {
            bodyMapper: Mappers.KeyPhraseBatchResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var sentimentOperationSpec = {
    httpMethod: "POST",
    path: "sentiment",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.showStats
    ],
    requestBody: {
        parameterPath: [
            "options",
            "multiLanguageBatchInput"
        ],
        mapper: Mappers.MultiLanguageBatchInput
    },
    responses: {
        200: {
            bodyMapper: Mappers.SentimentBatchResult
        },
        500: {
            bodyMapper: Mappers.ErrorResponse
        },
        default: {}
    },
    serializer: serializer
};
export { TextAnalyticsClient, TextAnalyticsClientContext, Models as TextAnalyticsModels, Mappers as TextAnalyticsMappers };
//# sourceMappingURL=textAnalyticsClient.js.map